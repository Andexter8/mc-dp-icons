{"version":3,"file":"web_extension.js","mappings":"qxBAAA,kBACA,SAEA,IAAIA,EAEJ,iCACC,IAAIC,EAAkB,EAAAC,UAAUC,mBAAmBC,IAAY,mCAC/D,GAAwB,KAApBH,EAAwB,CAC3B,IAAII,EAAmBC,EAAOJ,UAAUC,iBAAiB,aAAaC,IAAY,aACzD,gBAArBC,IACHL,EAAmBK,EAErB,MACCL,EAAmBC,CAErB,EAGA,6BACqB,EAAAC,UAAUC,mBAAmBC,IAAa,sCAE7DE,EAAOJ,UACNK,UAAU,iBAAkB,sBAC5BC,MAAMC,IACmBA,EAAMC,OAAS,EAEvCJ,EAAOJ,UAAUC,iBAAiB,aAChCQ,OAAO,YAAa,cAAeL,EAAOM,oBAAoBC,WACtDb,GACVM,EAAOJ,UAAUC,iBAAiB,aAChCQ,OAAO,YAAaX,EAAkBM,EAAOM,oBAAoBC,UACpE,GAGH,C,iuBClCA,kBACA,WAEA,oBAAyBC,GAIxBA,EAAQC,cAAcC,KACrBV,EAAOJ,UAAUe,6BAA4B,KAAKC,EAAYC,iBAAiB,IAC/Eb,EAAOJ,UAAUkB,kBAAiB,KAAKF,EAAYC,iBAAiB,IACpEb,EAAOJ,UAAUmB,kBAAiB,KAAKH,EAAYC,iBAAiB,IACpEb,EAAOJ,UAAUoB,kBAAiB,KAAKJ,EAAYC,iBAAiB,IACpEb,EAAOJ,UAAUqB,0BAAyB,KAAKL,EAAYM,qBAAqB,KAIjFN,EAAYM,sBACZN,EAAYC,kBAEZ,IAAIM,EAAsBnB,EAAOoB,SAASC,gBAAgB,mCAAmC,KAC5FrB,EAAOoB,SAASE,eAAe,gCAAiC,4BAA4B,IAG7Fd,EAAQC,cAAcC,KAAKS,EAC5B,C,UCxBAI,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":[".././src/theme_change.ts",".././src/web_extension.ts","../external commonjs \"vscode\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { workspace } from 'vscode';\r\n\r\nlet defaultIconTheme: string | undefined;\r\n\r\nexport function getDefaultIconTheme() {\r\n\tlet configIconTheme = workspace.getConfiguration().get<string>('mc-dp-icons.setDefaultIconTheme');\r\n\tif (configIconTheme === \"\") {\r\n\t\tlet currentIconTheme = vscode.workspace.getConfiguration('workbench').get<string>('iconTheme');\r\n\t\tif (currentIconTheme !== \"mc-dp-icons\") {\r\n\t\t\tdefaultIconTheme = currentIconTheme;\r\n\t\t}\r\n\t} else {\r\n\t\tdefaultIconTheme = configIconTheme;\r\n\t}\r\n}\r\n\r\n// Updates the icon theme theme based on the existence of pack.mcmeta in the workspace\r\nexport function checkPackMcmeta() {\r\n\tconst enableCheck = workspace.getConfiguration().get<boolean>('mc-dp-icons.enablePackMcmetaCheck');\r\n\t\tif (enableCheck) {\r\n\t\tvscode.workspace\r\n\t\t.findFiles('**/pack.mcmeta', '**/node_modules/**')\r\n\t\t.then((files) => {\r\n\t\t\tconst packMcmetaExists = files.length > 0;\r\n\t\t\tif (packMcmetaExists) {\r\n\t\t\t\tvscode.workspace.getConfiguration('workbench')\r\n\t\t\t\t\t.update('iconTheme', 'mc-dp-icons', vscode.ConfigurationTarget.Workspace);\r\n\t\t\t} else if (defaultIconTheme) {\r\n\t\t\t\tvscode.workspace.getConfiguration('workbench')\r\n\t\t\t\t\t.update('iconTheme', defaultIconTheme, vscode.ConfigurationTarget.Workspace);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\t\r\n\t","import * as vscode from 'vscode';\r\nimport * as ThemeChange from './theme_change';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\t// console.log('Extension \"mc-dp-icons\" is now active!');\r\n\r\n\t// Register the event listeners\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.workspace.onDidChangeWorkspaceFolders(()=>{ThemeChange.checkPackMcmeta();}),\r\n\t\tvscode.workspace.onDidRenameFiles(()=>{ThemeChange.checkPackMcmeta();}),\r\n\t\tvscode.workspace.onDidDeleteFiles(()=>{ThemeChange.checkPackMcmeta();}),\r\n\t\tvscode.workspace.onDidCreateFiles(()=>{ThemeChange.checkPackMcmeta();}),\r\n\t\tvscode.workspace.onDidChangeConfiguration(()=>{ThemeChange.getDefaultIconTheme();})\r\n\t);\r\n\r\n\t// Calling these functions on startup\r\n\tThemeChange.getDefaultIconTheme();\r\n\tThemeChange.checkPackMcmeta();\r\n\t\r\n\tlet DpIconsOpenSettings = vscode.commands.registerCommand('mc-dp-icons.DpIconsOpenSettings', () => {\r\n\t\tvscode.commands.executeCommand('workbench.action.openSettings', '@ext:superant.mc-dp-icons');\r\n\t});\r\n\r\n\tcontext.subscriptions.push(DpIconsOpenSettings);\r\n}\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(681);\n"],"names":["defaultIconTheme","configIconTheme","workspace","getConfiguration","get","currentIconTheme","vscode","findFiles","then","files","length","update","ConfigurationTarget","Workspace","context","subscriptions","push","onDidChangeWorkspaceFolders","ThemeChange","checkPackMcmeta","onDidRenameFiles","onDidDeleteFiles","onDidCreateFiles","onDidChangeConfiguration","getDefaultIconTheme","DpIconsOpenSettings","commands","registerCommand","executeCommand","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}